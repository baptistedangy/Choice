// Test script pour simuler un scan de menu
import { getTopRecommendations } from './openai.js';

// Menus de test avec diff√©rents niveaux de qualit√©
const testMenus = [
  // Menu clair et complet
  {
    name: "Menu clair",
    text: `MENU DU JOUR

ENTR√âES:
- Salade C√©sar: Laitue, parmesan, cro√ªtons, vinaigrette - 8‚Ç¨
- Soupe √† l'oignon: Oignons caram√©lis√©s, fromage gratin√© - 6‚Ç¨

PLATS:
- Steak Frites: B≈ìuf grill√©, frites maison, sauce au poivre - 18‚Ç¨
- Poisson du jour: Filet de bar, l√©gumes de saison - 16‚Ç¨
- Pasta Carbonara: P√¢tes, ≈ìufs, lardons, parmesan - 14‚Ç¨

DESSERTS:
- Cr√®me br√ªl√©e: Vanille de Madagascar - 7‚Ç¨
- Tarte Tatin: Pommes caram√©lis√©s - 6‚Ç¨`
  },
  
  // Menu partiellement lisible
  {
    name: "Menu partiel",
    text: `MENU
Salade C√©sar 8‚Ç¨
Steak Frites 18‚Ç¨
Poisson 16‚Ç¨`
  },
  
  // Menu tr√®s flou
  {
    name: "Menu flou",
    text: `menu du jour
quelque chose avec du poulet
plat du jour
dessert`
  },
  
  // Texte non-menu
  {
    name: "Non-menu",
    text: `Bienvenue dans notre restaurant
Horaires d'ouverture: 12h-14h, 19h-22h
R√©servations: 01 23 45 67 89`
  }
];

const testUserProfile = {
  dietaryRestrictions: [],
  budget: "medium",
  cuisinePreferences: ["French", "Italian"],
  allergies: [],
  spiceTolerance: "medium"
};

async function testMenuAnalysis() {
  console.log('üß™ Testing menu analysis with different quality levels...\n');
  
  for (const menu of testMenus) {
    console.log(`üìã Testing: ${menu.name}`);
    console.log(`üìù Menu text: ${menu.text.substring(0, 100)}...`);
    
    try {
      const recommendations = await getTopRecommendations(menu.text, testUserProfile);
      
      if (recommendations && recommendations.length > 0 && !recommendations[0].error) {
        console.log('‚úÖ SUCCESS - Got recommendations:', recommendations.length);
        recommendations.forEach((rec, i) => {
          console.log(`  ${i + 1}. ${rec.title} - ${rec.description}`);
        });
      } else {
        console.log('‚ùå FAILED - No valid recommendations');
        if (recommendations && recommendations[0] && recommendations[0].error) {
          console.log(`   Error: ${recommendations[0].error}`);
        }
      }
    } catch (error) {
      console.log('‚ùå ERROR:', error.message);
    }
    
    console.log('---\n');
  }
}

// Test avec un vrai menu fran√ßais
async function testFrenchMenu() {
  console.log('üá´üá∑ Testing with French menu...\n');
  
  const frenchMenu = `
  CARTE DU JOUR
  
  ENTREES
  Salade compos√©e maison - 7‚Ç¨
  Velout√© de l√©gumes - 6‚Ç¨
  
  PLATS
  Filet de bar √† la proven√ßale - 22‚Ç¨
  Escalope de veau √† la cr√®me - 20‚Ç¨
  Risotto aux champignons - 16‚Ç¨
  
  DESSERTS
  Tarte au citron - 6‚Ç¨
  Cr√®me br√ªl√©e - 7‚Ç¨
  `;
  
  try {
    const recommendations = await getTopRecommendations(frenchMenu, testUserProfile);
    console.log('French menu analysis result:', recommendations);
  } catch (error) {
    console.log('French menu analysis error:', error.message);
  }
}

// Ex√©cuter les tests
async function runMenuTests() {
  console.log('üöÄ Starting menu analysis tests...\n');
  
  await testMenuAnalysis();
  await testFrenchMenu();
  
  console.log('‚úÖ Menu analysis tests completed!');
}

// Ex√©cuter si le script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runMenuTests();
}

export { testMenuAnalysis, testFrenchMenu, runMenuTests }; 