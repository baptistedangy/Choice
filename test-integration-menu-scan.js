// Test d'int√©gration complet du scan de menu
// Simule le flux Camera -> /recommend -> Recommendations

// Simuler le profil utilisateur v√©g√©tarien
const userProfile = {
  age: 30,
  weight: 70,
  height: 175,
  activityLevel: 'moderate',
  goal: 'maintain',
  dietaryPreferences: ['vegetarian'],
  allergies: [],
  dietaryLaws: 'none',
  preferredProteinSources: [],
  tasteAndPrepPreferences: [],
  healthFlags: []
};

// Simuler le contexte d'analyse
const analysisContext = {
  hunger: 'moderate',
  timing: 'regular'
};

// Simuler le menu scann√© (bas√© sur l'image)
const scannedMenu = [
  {
    name: 'TIGERMILK CEVICHE GF',
    description: 'El √∫nico. Lieu noir cru, leche de tigre au lait de coco, mangue, grenade, coriandre fra√Æche, pickles d\'oignons rouges, patates douces r√¥ties.',
    price: 14.50,
    calories: 280,
    macros: { protein: 22, carbs: 18, fat: 12 }
  },
  {
    name: 'AMARILLO GF',
    description: 'Un ceviche vraiment loco loco! On a pris du Lieu noir cru que l\'on a fait mariner dans un leche de tigre twist√© √† l\'aji amarillo dont tu te souviendras longtemps, une cr√®me d\'avocat pour la douceur, des petites noisettes croquantes, grenade, patates douces r√¥ties et coriandre fra√Æche.',
    price: 15.00,
    calories: 320,
    macros: { protein: 25, carbs: 22, fat: 15 }
  },
  {
    name: 'SALM√ìN M√ìN M√ìN GF',
    description: 'Ceviche de saumon aux supr√™mes d\'orange, leche de tigre et cr√®me jalape√±os. Un peu de pickles d\'oignon rouge, de la sauce chimichurri et de la coriandre. Servi avec des patates douces r√¥ties bien fondantes et leur mayo chipotle.',
    price: 16.00,
    calories: 290,
    macros: { protein: 24, carbs: 20, fat: 14 }
  },
  {
    name: 'I\'M ON A DATE QUESADILLA V',
    description: 'Champignons de saison, mozzarella, cheddar, cr√®me jalape√±o, pickles d\'oignons, parmesan, salade de jeunes pousses et grenades.',
    price: 13.50,
    calories: 380,
    macros: { protein: 18, carbs: 28, fat: 22 }
  },
  {
    name: 'COCHINITA PIBIL QUESADILLA',
    description: 'Cochinita Pibil c\'est un cochon bien bien bien marin√©, Yucatan style, pos√© sur du cheese. That\'s it. Mais qu\'est ce que c\'est bon! Servie avec une petite salade de jeunes pousses et grenades.',
    price: 14.00,
    calories: 420,
    macros: { protein: 26, carbs: 25, fat: 24 }
  },
  {
    name: 'CHEESY BIRRIA QUESADILLA',
    description: 'Quesadilla au triple cheese et paleron de boeuf effiloch√©, mijot√© longtemps et avec beaucoup d\'amour, accompagn√© d\'un petit bouillon de viande pour y tremper ta quesadilla toute cheesy. Un peu de coriandre pour la fra√Æcheur, une petite salade de jeunes pousses & grenades pour la bonne conscience.',
    price: 15.90,
    calories: 450,
    macros: { protein: 28, carbs: 26, fat: 26 }
  }
];

console.log('üß™ Test d\'int√©gration complet du scan de menu');
console.log('üìã Profil utilisateur:', userProfile.dietaryPreferences);
console.log('üéØ Contexte d\'analyse:', analysisContext);
console.log('üçΩÔ∏è Menu scann√©:', scannedMenu.length, 'plats');

// Test 1: Appel √† l'API /recommend
console.log('\nüîç Test 1: Appel √† l\'API /recommend');
console.log('Payload envoy√©:', {
  dishes: scannedMenu,
  profile: userProfile,
  context: analysisContext
});

// Simuler l'appel API (en production, ce serait un vrai fetch)
console.log('\nüì° Simulation de l\'appel √† /recommend...');

// Test 2: V√©rification des donn√©es re√ßues
console.log('\nüìä Test 2: V√©rification des donn√©es re√ßues');
console.log('Structure attendue de la r√©ponse:');
console.log('  - success: boolean');
console.log('  - recommendations: Array (top 3)');
console.log('  - fallback: boolean');
console.log('  - debug: object');

// Test 3: V√©rification des recommandations
console.log('\nüèÜ Test 3: V√©rification des recommandations');
console.log('Crit√®res de validation:');
console.log('  ‚úÖ Le plat v√©g√©tarien doit appara√Ætre dans le top 3');
console.log('  ‚úÖ Les scores doivent √™tre > 0 et ‚â§ 10');
console.log('  ‚úÖ Les calories et macros doivent √™tre affich√©es');
console.log('  ‚úÖ Les raisons doivent √™tre g√©n√©r√©es');

// Test 4: Simulation de la navigation
console.log('\nüß≠ Test 4: Simulation de la navigation');
console.log('Donn√©es transmises √† la page Recommendations:');
console.log('  - recommendations: Array (de l\'API /recommend)');
console.log('  - menuText: string (texte OCR)');
console.log('  - source: "scan"');
console.log('  - context: object (hunger + timing)');
console.log('  - fallback: boolean (du serveur)');
console.log('  - debug: object (informations de debug)');

// Test 5: V√©rification de l'affichage
console.log('\nüì± Test 5: V√©rification de l\'affichage');
console.log('√âl√©ments √† v√©rifier dans l\'UI:');
console.log('  - Banni√®re de contexte d\'analyse');
console.log('  - Banni√®re de fallback (si applicable)');
console.log('  - Cartes de recommandations avec scores corrects');
console.log('  - Affichage des calories et macros');
console.log('  - Badges de raisons');

console.log('\n‚úÖ Test d\'int√©gration termin√© !');
console.log('\nüéØ Prochaines √©tapes:');
console.log('  1. Tester le scan r√©el via l\'interface Camera');
console.log('  2. V√©rifier que les donn√©es arrivent correctement sur la page Recommendations');
console.log('  3. Confirmer que l\'affichage est correct (scores, calories, macros)');
console.log('  4. V√©rifier que le plat v√©g√©tarien appara√Æt bien en #1');
